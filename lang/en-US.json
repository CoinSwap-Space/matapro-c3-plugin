{
  "languageTag": "en-US",
  "fileDescription": "Strings for metapro plugin.",
  "text": {
    "plugins": {
      "metaproplugin": {
        "name": "metapro plugin",
        "description": "metapro plugin addon for Web3 connection, user management, and leaderboard integration.",
        "help-url": "https://docs.metaproprotocol.com/developer-documentation/developer-documentation-for-the-construct-3-plugin",
        "properties": {
          "users-service-api-url": {
            "name": "Users service API URL",
            "desc": "The URL of the Users Service API used by the metapro system."
          },
          "project-id": {
            "name": "Project ID",
            "desc": "The unique identifier for your project in metapro."
          },
          "leaderboard-id": {
            "name": "Leaderboard ID",
            "desc": "The ID of the leaderboard used in the metapro system."
          },
          "referral-leaderboard-id": {
            "name": "Referral leaderboard ID",
            "desc": "The ID of the referral leaderboard used in the metapro system."
          },
          "leaderboard-api-key": {
            "name": "Leaderboard API key",
            "desc": "The API key required to access the leaderboard."
          },
          "leaderboard-api-url": {
            "name": "Leaderboard API URL",
            "desc": "The URL of the Leaderboard API used in the metapro system."
          },
          "referral-api-url": {
            "name": "Referral API URL",
            "desc": "The URL of the Referral API used in the metapro system."
          },
          "nft-api-url": {
            "name": "NFT API URL",
            "desc": "The URL of the NFT API used in the metapro system."
          },
          "platform-id": {
            "name": "Platform ID",
            "desc": "The ID of platform."
          }
        },
        "aceCategories": {
          "products": "Products"
        },
        "conditions": {
          "on-account-received": {
            "list-name": "On account received",
            "display-text": "On account received",
            "description": "Triggered when the user's Ethereum account is successfully retrieved."
          },
          "on-user-logged-in": {
            "list-name": "On user logged in",
            "display-text": "On user logged in",
            "description": "Triggered when the user is successfully logged in."
          },
          "on-leaderboard-received": {
            "list-name": "On leaderboard received",
            "display-text": "On leaderboard received",
            "description": "Triggered when leaderboard data is successfully retrieved."
          },
          "on-username-updated": {
            "list-name": "On username updated",
            "display-text": "On username updated",
            "description": "Triggered when username is successfully updated."
          },
          "on-avatar-updated": {
            "list-name": "On avatar updated",
            "display-text": "On avatar updated",
            "description": "Triggered when avatar is successfully updated."
          },
          "on-is-registered": {
            "list-name": "On is user registered",
            "display-text": "On is user registered",
            "description": "Triggered when it is confirmed that the user is registered in the system."
          },
          "on-is-not-registered": {
            "list-name": "On user not registered",
            "display-text": "On user not registered",
            "description": "Triggered when it is confirmed that the user is not registered in the system."
          },
          "on-user-score-received": {
            "list-name": "On user score received",
            "display-text": "On user score received",
            "description": "Triggered if scores data is successfully received."
          },
          "on-referral-code-exists": {
            "list-name": "On referral code exists",
            "display-text": "On referral code exists",
            "description": "Triggered if referral data is successfully received and user has assigned referral code."
          },
          "on-referral-code-empty": {
            "list-name": "On referral code empty",
            "display-text": "On referral code empty",
            "description": "Triggered if referral data is successfully received and user doesn't have referral code."
          },
          "on-referral-code-generated": {
            "list-name": "On referral code generated",
            "display-text": "On referral code generated",
            "description": "Triggered when a new referral code is successfully generated for the user."
          },
          "on-referral-structure-received": {
            "list-name": "On referral structure received",
            "display-text": "On referral structure received",
            "description": "Triggered when the referral structure data is successfully received."
          },
          "on-error": {
            "list-name": "On error",
            "display-text": "On error",
            "description": "Triggered when an error occurs during any plugin operation."
          },
          "on-best-score-received": {
            "list-name": "On best score received",
            "display-text": "On best score received",
            "description": "Triggered when the best score data for the user is successfully retrieved."
          },
          "on-best-scores-leaderboard-received": {
            "list-name": "On best scores leaderboard received",
            "display-text": "On best scores leaderboard received",
            "description": "Triggered when the best scores leaderboard data is successfully retrieved."
          },
          "on-referral-leaderboard-received": {
            "list-name": "On referral leaderboard received",
            "display-text": "On referral leaderboard received",
            "description": "Triggered when the referral leaderboard data is successfully retrieved."
          },
          "on-transaction-sent": {
            "list-name": "On transaction sent",
            "display-text": "On transaction sent",
            "description": "Triggered when a transaction is successfully sent and the transaction hash is received."
          },
          "on-number-of-runs-received": {
            "list-name": "On number of gameplays received",
            "display-text": "On number of gameplays received",
            "description": "Triggered when the total number of runs for the user is successfully retrieved."
          },
          "on-ref-code-from-deeplink-exists": {
            "list-name": "On referral code from deep link exists",
            "display-text": "On referral code from deep link exists",
            "description": "Triggered when a referral code is successfully retrieved from the provided deep link."
          },
          "on-read-contract-data-received": {
            "list-name": "On contract data received",
            "display-text": "On contract data received",
            "description": "Triggered when data from the smart contract is successfully retrieved and read."
          },
          "on-multiple-read-contract-data-received": {
            "list-name": "On multiple contract data received",
            "display-text": "On multiple contract data received",
            "description": "Triggered when data from multiple smart contract reads are successfully retrieved."
          },
          "on-user-nfts-received": {
            "list-name": "On user NFTs received",
            "display-text": "On user NFTs received",
            "description": "Triggered when the NFTs owned by the user are successfully retrieved."
          }
        },
        "actions": {
          "request-account": {
            "list-name": "Request account",
            "display-text": "Request account",
            "description": "Requests the user's Ethereum account from the connected wallet."
          },
          "login": {
            "list-name": "Login",
            "display-text": "Login user with referral settings ID {0}, referral code {1}, and rules checked {2}",
            "description": "Logs in the user using their Ethereum account. Optionally includes a referral code and checks if rules are accepted.",
            "params": {
              "referral-settings-id": {
                "name": "Referral settings ID",
                "desc": "The ID for the referral settings configured in the project."
              },
              "referral-code": {
                "name": "Referral code",
                "desc": "The referral code provided by the user, if any."
              },
              "rules-checked": {
                "name": "Rules checked",
                "desc": "Indicates whether the user has accepted the rules."
              }
            }
          },
          "request-leaderboard": {
            "list-name": "Request leaderboard",
            "display-text": "Request leaderboard with limit {0}, minimum balance {1} and maximum balance {2}",
            "description": "Requests leaderboard data for a specific score range with a defined limit.",
            "params": {
              "limit": {
                "name": "Limit",
                "desc": "The maximum number of leaderboard entries to retrieve."
              },
              "min-balance": {
                "name": "Min balance",
                "desc": "Minimum balance to display."
              },
              "max-balance": {
                "name": "Max balance",
                "desc": "Maximum balance to display."
              }
            }
          },
          "update-score": {
            "list-name": "Update user score",
            "display-text": "Update user score with {0} and include {1} as dynamic rewards",
            "description": "Updates user score.",
            "params": {
              "score": {
                "name": "Score",
                "desc": "The score value to be updated for the user."
              },
              "dynamic-rewards": {
                "name": "Dynamic rewards",
                "desc": "Optional rewards to be updated alongside the user score, such as coins, gasoline, etc. Provide an object with reward names as keys and values as the amounts."
              }
            }
          },
          "update-username": {
            "list-name": "Update username",
            "display-text": "Update username to {0}",
            "description": "Updates username.",
            "params": {
              "username": {
                "name": "Username",
                "desc": "The new value for username."
              }
            }
          },
          "update-avatar": {
            "list-name": "Update avatar",
            "display-text": "Update avatar to {0}",
            "description": "Updates avatar.",
            "params": {
              "avatar": {
                "name": "Avatar URL",
                "desc": "The new avatar URL."
              }
            }
          },
          "check-if-registered": {
            "list-name": "Check if user is already registered",
            "display-text": "Check if user is already registered",
            "description": "Checks if the user's account is already registered in the system."
          },
          "request-user-score": {
            "list-name": "Request user score",
            "display-text": "Request user score and dynamic rewards {0}",
            "description": "Requests user current and total score within provided leaderboard, including specified dynamic rewards.",
            "params": {
              "dynamic-rewards-names": {
                "name": "Dynamic rewards names",
                "desc": "A single dynamic reward name or a list of dynamic reward names to be included in the score request (e.g., coins, gasoline)."
              }
            }
          },
          "fetch-referral-code": {
            "list-name": "Fetch user's referral code",
            "display-text": "Request user's referral code",
            "description": "Requests user's referral code from referral system."
          },
          "generate-referral-code": {
            "list-name": "Generate a referral code for the user",
            "display-text": "Generate a referral code for the user",
            "description": "Generates a unique referral code associated with the user's userId."
          },
          "request-referral-structure": {
            "list-name": "Request the referral structure",
            "display-text": "Request the referral structure",
            "description": "Retrieves the referral downline structure, including level, total score, user count, and percentage of each level in the referral system."
          },
          "add-score": {
            "list-name": "Add score",
            "display-text": "Add score {0} for map ID {1}, using asset {2}, addons {3}, and including {4} as dynamic rewards",
            "description": "Add a new entry score for user.",
            "params": {
              "score": {
                "name": "Score",
                "desc": "The score earned by the user."
              },
              "map-id": {
                "name": "Map ID",
                "desc": "The ID of the map."
              },
              "asset-id": {
                "name": "Asset ID",
                "desc": "The ID of the used asset."
              },
              "addons": {
                "name": "Addons",
                "desc": "The IDs of the used addons."
              },
              "dynamic-rewards": {
                "name": "Dynamic rewards",
                "desc": "Optional rewards to be updated alongside the user score, such as coins, gasoline, etc. Provide an object with reward names as keys and values as the amounts."
              }
            }
          },
          "request-best-score": {
            "list-name": "Request best score",
            "display-text": "Request the best score for the user for map {0}",
            "description": "Retrieves the highest score achieved by the user.",
            "params": {
              "map-id": {
                "name": "Map ID",
                "desc": "The ID of the map."
              }
            }
          },
          "request-best-scores-leaderboard-by-map-id": {
            "list-name": "Request the best scores leaderboard",
            "display-text": "Request the best scores leaderboard for map {0} with limit {1}",
            "description": "Requests the leaderboard data showing the best scores for a specific map, with an optional limit.",
            "params": {
              "map-id": {
                "name": "Map ID",
                "desc": "The ID of the map."
              },
              "limit": {
                "name": "Limit",
                "desc": "The maximum number of leaderboard entries to retrieve."
              }
            }
          },
          "request-referral-leaderboard": {
            "list-name": "Request referral leaderboard",
            "display-text": "Request referral leaderboard with ID {0}, API key {1}, limit {2}, minimum balance {3}, and maximum balance {4}",
            "description": "Requests referral leaderboard data for a specific score range with a defined limit.",
            "params": {
              "ref-leaderboard-id": {
                "name": "Referral leaderboard ID",
                "desc": "The unique identifier for the referral leaderboard."
              },
              "ref-leaderboard-api-key": {
                "name": "Referral leaderboard API key",
                "desc": "The API key required to access the referral leaderboard."
              },
              "limit": {
                "name": "Limit",
                "desc": "The maximum number of leaderboard entries to retrieve."
              },
              "min-balance": {
                "name": "Min balance",
                "desc": "Minimum balance to display."
              },
              "max-balance": {
                "name": "Max balance",
                "desc": "Maximum balance to display."
              }
            }
          },
          "send-contract-transaction": {
            "list-name": "Send a transaction to the contract",
            "display-text": "Send a transaction to the contract at address {0} using the ABI {1}, function {2}, with input data {3}, on chain ID {4}",
            "description": "Sends a transaction to interact with a smart contract at the specified address using the provided ABI, function name, input data, and target chain ID.",
            "params": {
              "contract-address": {
                "name": "Contract address",
                "desc": "Address of the smart contract."
              },
              "abi": {
                "name": "ABI",
                "desc": "A JSON stringified representation of the ABI (Application Binary Interface)."
              },
              "function-name": {
                "name": "Function name",
                "desc": "The name of the function being called in the ABI, provided as a JSON stringified representation."
              },
              "input-data": {
                "name": "Input data",
                "desc": "A JSON stringified representation of the input data required for the function call. Example format: \"{'_to':'123','_tokenId':1,'_amount':1}\"."
              },
              "chain-id": {
                "name": "Chain ID",
                "desc": "The target chain ID in decimals."
              }
            }
          },
          "request-number-of-runs": {
            "list-name": "Request the number of gameplays",
            "display-text": "Request the number of gameplays for map {0}",
            "description": "Retrieve the number of gameplays made for a specific map.",
            "params": {
              "map-id": {
                "name": "Map ID",
                "desc": "The unique identifier of the map (optional)."
              }
            }
          },
          "check-referral-code-from-deeplink": {
            "list-name": "Check referral code from a deep link",
            "display-text": "Check if a referral code exists in the provided deep link",
            "description": "Validates and determines if a referral code is present in the given deep link."
          },
          "read-contract": {
            "list-name": "Read data from the contract",
            "display-text": "Read data from the contract at address {0} using the ABI {1}, function {2}, with input data {3}, on chain ID {4}",
            "description": "Reads data from a smart contract at the specified address using the provided ABI, function name, input data, and target chain ID.",
            "params": {
              "contract-address": {
                "name": "Contract address",
                "desc": "Address of the smart contract."
              },
              "abi": {
                "name": "ABI",
                "desc": "A JSON stringified representation of the ABI (Application Binary Interface)."
              },
              "function-name": {
                "name": "Function name",
                "desc": "The name of the function being called in the ABI, provided as a JSON stringified representation."
              },
              "input-data": {
                "name": "Input data",
                "desc": "A JSON stringified representation of the input data required for the function call. Example format: \"{'_to':'123','_tokenId':1,'_amount':1}\"."
              },
              "rpc-url": {
                "name": "RPC URL",
                "desc": "The URL of the Remote Procedure Call (RPC) endpoint for interacting with the blockchain."
              }
            }
          },
          "multiple-read-contract": {
            "list-name": "Read multiple data from the contract",
            "display-text": "Read multiple data from the contract at address {0} using the ABI {1}, functions {2}, with input data {3}, on RPC URL {4}",
            "description": "Reads multiple data from a smart contract at the specified address using the provided ABI, multiple function names, input data, and RPC URL.",
            "params": {
              "contract-address": {
                "name": "Contract address",
                "desc": "The address of the smart contract."
              },
              "abi": {
                "name": "ABI",
                "desc": "A JSON stringified representation of the ABI (Application Binary Interface)."
              },
              "function-names": {
                "name": "Function names",
                "desc": "A JSON stringified representation of the array of function names to be called in the ABI."
              },
              "inputs-data": {
                "name": "Input data",
                "desc": "A JSON stringified representation of the array of input data for each function call. Example format: \"[{'_to':'123','_tokenId':1,'_amount':1}, {'_to':'456','_tokenId':2}]\"."
              },
              "rpc-url": {
                "name": "RPC URL",
                "desc": "The URL of the Remote Procedure Call (RPC) endpoint for interacting with the blockchain."
              }
            }
          },
          "request-user-nfts": {
            "list-name": "Request user NFTs",
            "display-text": "Request user NFTs with query {0}",
            "description": "Retrieves the NFTs owned by a user based on a provided query as stringified JSON.",
            "params": {
              "query": {
                "name": "Query",
                "desc": "A stringified JSON representation of the query params. Example format: {'tokens': [{'contractAddress': '0x3203c9e46ca618c8c1ce5dc67e7e9d75f5da2377', 'tokenId': 123}], 'sort': {'sortKey': 'token.creationBlock', 'sortDirection': 'desc'}}"
              }
            }
          },
          "set-transaction-status": {
            "list-name": "Set the transaction status",
            "display-text": "Set the transaction status to {0}",
            "description": "Sets the internal transaction status variable to the provided status value, allowing you to track the current state of a transaction.",
            "params": {
              "status": {
                "name": "Status",
                "desc": "The status value to set for the internal transaction status variable."
              }
            }
          },
          "send-crypto": {
            "list-name": "Send crypto",
            "display-text": "Send {1} amount of tokens from contract address {0} to receiver {2} on chain ID {3}",
            "description": "Sends cryptocurrency from the specified contract address to a receiver, including the amount and target chain ID.",
            "params": {
              "token-address": {
                "name": "Token contract address",
                "desc": "Address of the token contract to send cryptocurrency from."
              },
              "amount": {
                "name": "Amount",
                "desc": "The amount of cryptocurrency to send (Unit Converter: https://etherscan.io/unitconverter)."
              },
              "receiver": {
                "name": "Receiver address",
                "desc": "The address of the receiver to whom the cryptocurrency will be sent."
              },
              "chain-id": {
                "name": "Chain ID",
                "desc": "The target blockchain network ID, provided as a decimal."
              }
            }
          }
        },
        "expressions": {
          "get-account": {
            "description": "Get the current user's Ethereum account.",
            "translated-name": "Get account",
            "params": {}
          },
          "get-avatar": {
            "description": "Get the user's avatar URL.",
            "translated-name": "Get avatar",
            "params": {}
          },
          "get-user-id": {
            "description": "Get the user's unique ID.",
            "translated-name": "Get user ID",
            "params": {}
          },
          "get-username": {
            "description": "Get the user's username.",
            "translated-name": "Get username",
            "params": {}
          },
          "get-access-token": {
            "description": "Get the user's Web3 access token.",
            "translated-name": "Get access token",
            "params": {}
          },
          "get-leaderboard": {
            "description": "Get the general leaderboard data.",
            "translated-name": "Get the general leaderboard",
            "params": {}
          },
          "get-current-score": {
            "description": "Get the user's current score.",
            "translated-name": "Get user's current score",
            "params": {}
          },
          "get-total-score": {
            "description": "Get the user's total score.",
            "translated-name": "Get the user's total score",
            "params": {}
          },
          "get-referral-code": {
            "description": "Get the user's referral code.",
            "translated-name": "Get the user's referral code",
            "params": {}
          },
          "get-referral-structure": {
            "description": "Get the user's referral downline structure.",
            "translated-name": "Get referral downline structure",
            "params": {}
          },
          "get-best-score": {
            "description": "Get the user's highest score.",
            "translated-name": "Get the user's best score",
            "params": {}
          },
          "get-best-scores-leaderboard": {
            "description": "Get the leaderboard showing the user's highest scores.",
            "translated-name": "Get best scores leaderboard",
            "params": {}
          },
          "get-referral-leaderboard": {
            "description": "Get the leaderboard showing the user's referral-based scores.",
            "translated-name": "Get referral leaderboard",
            "params": {}
          },
          "get-last-transaction-hash": {
            "description": "Get the hash of the most recent transaction sent by the plugin.",
            "translated-name": "Get last transaction hash",
            "params": {}
          },
          "get-number-of-runs": {
            "description": "Get the total number of gameplays for the user.",
            "translated-name": "Get number of gameplays",
            "params": {}
          },
          "get-last-error": {
            "description": "Get the most recent error message encountered by the plugin.",
            "translated-name": "Get last error message",
            "params": {}
          },
          "get-project-id": {
            "description": "Get the project ID associated with the current session.",
            "translated-name": "Get project ID",
            "params": {}
          },
          "get-leaderboard-id": {
            "description": "Get the leaderboard ID associated with the current project.",
            "translated-name": "Get leaderboard ID",
            "params": {}
          },
          "get-leaderboard-api-key": {
            "description": "Get the API key for accessing the leaderboard services.",
            "translated-name": "Get leaderboard API key",
            "params": {}
          },
          "get-users-service-api-url": {
            "description": "Get the URL for accessing the user service API.",
            "translated-name": "Get users service API URL",
            "params": {}
          },
          "get-leaderboard-api-url": {
            "description": "Get the URL for accessing the leaderboard API.",
            "translated-name": "Get leaderboard API URL",
            "params": {}
          },
          "get-referral-api-url": {
            "description": "Get the API URL for referral services.",
            "translated-name": "Get referral API URL",
            "params": {}
          },
          "get-platform-id": {
            "description": "Get the platform ID for the current project.",
            "translated-name": "Get platform ID",
            "params": {}
          },
          "get-ref-code-from-deeplink": {
            "description": "Get the referral code from the provided deep link.",
            "translated-name": "Get referral code from deep link",
            "params": {}
          },
          "get-last-read-contract-data": {
            "description": "Get the data returned from the last read contract interaction.",
            "translated-name": "Get last read contract data",
            "params": {}
          },
          "get-multiple-last-read-contract-data": {
            "description": "Get the data returned from multiple contract read interactions.",
            "translated-name": "Get multiple last read contract data",
            "params": {}
          },
          "get-user-nfts": {
            "description": "Get the NFTs owned by the user.",
            "translated-name": "Get user NFTs",
            "params": {}
          },
          "get-nft-api-url": {
            "description": "Get the URL for accessing the NFT API.",
            "translated-name": "Get NFT API URL",
            "params": {}
          },
          "get-transaction-status": {
            "description": "Retrieves the current transaction status from the internal status variable.",
            "translated-name": "Get transaction status",
            "params": {}
          },
          "get-dynamic-reward": {
            "description": "Retrieves the current dynamic reward balances from the internal status variable. Returns a number if a single reward is requested, or a stringified object if multiple rewards are requested.",
            "translated-name": "Get dynamic reward balances",
            "params": {}
          }
        }
      }
    }
  }
}
